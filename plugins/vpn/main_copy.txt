from plugins.base_plugin import BasePlugin
import customtkinter
import os 
import tkinter as tk
import platform
from shares.encryption import *

config_path = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), 'shares', 'wg-client.conf')
#print(config_path)
#config_path = "/etc/wireguard/wg-client.conf"

#creating key pair for encryption 
get_or_create_key()

# Check if the encrypted data already exists
try:
    decrypted_data = decrypt_data()
except Exception as e:
    print(f"Error decrypting data: {e}")
    decrypted_data = None

if not decrypted_data:
    # creating the dict to be encrypted
    encrypted_text = encrypt_data({
        'private_key': '',
        'client_ip_address': '',
        'public_key': '',
        'allowed_ips': '',
        'endpoint': '',
        'port': '',
        'dns': ''
    })
    # retrieve values from the dict
    decrypted_data = decrypt_data()

#print(decrypted_data)

# Define the global variable
if platform.system() == "Windows":
    from shares.vpn_functions_windows import *
    service_name = f"WireGuardTunnel${os.path.basename(config_path).split('.')[0]}"
    wireguard_installed = False
    my_vpn_status = check_service_status(service_name)
elif platform.system() == "Linux":
    from shares.vpn_functions_linux import *
    from python_wireguard import Client, ServerConnection, Key
    my_vpn_status = check_service_status("wg-client", "10.49.64.53")
else:
    raise NotImplementedError("Unsupported platform")


class Plugin(BasePlugin):
    def __init__(self, app):
        super().__init__(
            id="008",
            order=8,
            name="VPN",
            description="VPN for windows",
            supported_systems=["Windows"],
            status="OK",
            translations={"US": "VPN", "ES": "VPN", "FR": "VPN"},
            icon_light_path=os.path.join(os.path.dirname(os.path.realpath(__file__)), "vpn_light.png"),
            icon_dark_path=os.path.join(os.path.dirname(os.path.realpath(__file__)), "vpn_dark.png"),
        )
        self.app = app

    def create_main_screen(self):
        self.main_container = customtkinter.CTkFrame(self.app, corner_radius=0, fg_color="transparent")
        self.main_container.grid_columnconfigure(0, weight=1)
        self.main_container.grid_rowconfigure(0, weight=1)
        self.main_container.grid_rowconfigure(1, weight=4)

        #name 20% of the hight 
        self.profile_name_label = customtkinter.CTkLabel(self.main_container, text="VPN", font=customtkinter.CTkFont(size=20))
        self.profile_name_label.grid(row=0, column=0, padx=20, pady=10)

        #container 80% of the hight
        self.sub_frame_container = customtkinter.CTkFrame(self.main_container, corner_radius=0, fg_color="transparent")
        self.sub_frame_container.grid(row=1, column=0, sticky="nsew")
        self.sub_frame_container.grid_rowconfigure(0, weight=3)
        self.sub_frame_container.grid_rowconfigure(1, weight=2)
        self.sub_frame_container.grid_columnconfigure(0, weight=1)  # Ensure the container expands horizontally


        #sub container 80% of the hight with 2 columns and two rows (80/20)
        self.sub_frame = customtkinter.CTkFrame(self.sub_frame_container, corner_radius=0, fg_color="transparent")
        self.sub_frame.grid(row=0, column=0, sticky="nsew")
        self.sub_frame.grid_columnconfigure((0, 1), weight=1)
        self.sub_frame.grid_rowconfigure((0, 1, 2), weight=1)

        self.interface_name_label = customtkinter.CTkLabel(self.sub_frame, text="[Interface]")
        self.interface_name_label.grid(row=0, column=0, padx=20, pady=10, sticky="w")

        #variables 
        my_width = 300
        my_height = 30
        
        self.privateKey = decrypted_data.get("private_key") or "Private Key"
        self.client_ip_address = decrypted_data.get("client_ip_address") or "Client IP Address"
        self.publicKey = decrypted_data.get("public_key") or "Public Key"
        self.allowedips = decrypted_data.get("allowed_ips") or "Allowed IPs"
        self.endpoint = decrypted_data.get("endpoint") or "Endpoint"
        self.dns = decrypted_data.get("dns") or "DNS"
        self.port = decrypted_data.get("port") or "PORT"
        #print(self.privateKey, self.client_ip_address, self.publicKey, self.allowedips, self.endpoint)


        self.row_container_1 = customtkinter.CTkFrame(self.sub_frame, corner_radius=0, fg_color="transparent")
        self.row_container_1.grid(row=1, column=0, sticky="nsew")

        self.title_private_key = customtkinter.CTkLabel(self.row_container_1, text="Private Key", anchor="w")
        self.title_private_key.grid(row=0, column=0, padx=20, pady=0, sticky="w")
        
        self.privateKey = customtkinter.CTkEntry(self.row_container_1, width=my_width, height=my_height, placeholder_text=self.privateKey)
        self.privateKey.grid(row=1, column=0, padx=20, pady=10)

        self.row_container_2 = customtkinter.CTkFrame(self.sub_frame, corner_radius=0, fg_color="transparent")
        self.row_container_2.grid(row=2, column=0, sticky="nsew")

        self.title_client_ip_address = customtkinter.CTkLabel(self.row_container_2, text="Client IP Address", anchor="w")
        self.title_client_ip_address.grid(row=0, column=0, padx=20, pady=0, sticky="w")
        
        self.client_ip_address = customtkinter.CTkEntry(self.row_container_2, width=my_width, height=my_height, placeholder_text=self.client_ip_address)
        self.client_ip_address.grid(row=1, column=0, padx=20, pady=10)

        self.row_container_6 = customtkinter.CTkFrame(self.sub_frame, corner_radius=0, fg_color="transparent")
        self.row_container_6.grid(row=3, column=0, sticky="nsew")

        self.title_dns = customtkinter.CTkLabel(self.row_container_6, text="DNS", anchor="w")
        self.title_dns.grid(row=0, column=0, padx=20, pady=0, sticky="w")
        
        self.dns = customtkinter.CTkEntry(self.row_container_6, width=my_width, height=my_height, placeholder_text=self.dns)
        self.dns.grid(row=1, column=0, padx=20, pady=10)

        self.peer_name_label = customtkinter.CTkLabel(self.sub_frame, text="[Peer]")
        self.peer_name_label.grid(row=0, column=1, padx=20, pady=10, sticky="w")

        self.row_container_3 = customtkinter.CTkFrame(self.sub_frame, corner_radius=0, fg_color="transparent")
        self.row_container_3.grid(row=1, column=1, sticky="nsew")

        self.title_public_key = customtkinter.CTkLabel(self.row_container_3, text="Public Key", anchor="w")
        self.title_public_key.grid(row=0, column=0, padx=20, pady=0, sticky="w")
        
        self.publicKey = customtkinter.CTkEntry(self.row_container_3, width=my_width, height=my_height, placeholder_text=self.publicKey)
        self.publicKey.grid(row=1, column=0, padx=20, pady=10)

        self.row_container_4 = customtkinter.CTkFrame(self.sub_frame, corner_radius=0, fg_color="transparent")
        self.row_container_4.grid(row=2, column=1, sticky="nsew")

        self.title_allowed_ips = customtkinter.CTkLabel(self.row_container_4, text="Allowed IPs", anchor="w")
        self.title_allowed_ips.grid(row=0, column=0, padx=20, pady=0, sticky="w")
        
        self.allowedips = customtkinter.CTkEntry(self.row_container_4, width=my_width, height=my_height, placeholder_text=self.allowedips)
        self.allowedips.grid(row=1, column=0, padx=20, pady=10)

        self.row_container_5 = customtkinter.CTkFrame(self.sub_frame, corner_radius=0, fg_color="transparent")
        self.row_container_5.grid(row=3, column=1, sticky="nsew")

        self.title_endpoint = customtkinter.CTkLabel(self.row_container_5, text="Endpoint", anchor="w")
        self.title_endpoint.grid(row=0, column=0, padx=20, pady=0, sticky="w")
        
        self.endpoint = customtkinter.CTkEntry(self.row_container_5, width=my_width, height=my_height, placeholder_text=self.endpoint)
        self.endpoint.grid(row=1, column=0, padx=20, pady=10)

        self.row_container_7 = customtkinter.CTkFrame(self.sub_frame, corner_radius=0, fg_color="transparent")
        self.row_container_7.grid(row=4, column=1, sticky="nsew")

        self.title_port = customtkinter.CTkLabel(self.row_container_7, text="Port", anchor="w")
        self.title_port.grid(row=0, column=0, padx=20, pady=0, sticky="w")
        
        self.port = customtkinter.CTkEntry(self.row_container_7, width=my_width, height=my_height, placeholder_text=self.port)
        self.port.grid(row=1, column=0, padx=20, pady=10)

        #create container buttons   

        self.container_buttons = customtkinter.CTkFrame(self.sub_frame_container, corner_radius=0, fg_color="transparent")
        self.container_buttons.grid(row=1, column=0, pady=5, sticky="sew")
        self.container_buttons.grid_columnconfigure((0, 1, 2), weight=1)

        # Upload button
        self.upload_button = customtkinter.CTkButton(self.container_buttons, text="Upload Tunnel")
        self.upload_button.grid(row=0, column=0, pady=10)

        # Save button
        self.save_button = customtkinter.CTkButton(self.container_buttons, text="Save")
        self.save_button.grid(row=0, column=1, pady=10)
        self.save_button.configure(command=self.save_and_verify_settings)
        
        # Connect button
        self.connect_button = customtkinter.CTkButton(self.container_buttons, text="Connect")
        self.connect_button.grid(row=0, column=2, pady=10)


        if "Running" == my_vpn_status:
            print("The VPN service is running.")
            self.connect_button.configure(text="Connected", fg_color="green")
            self.connect_button.bind("<Enter>", lambda e: self.connect_button.configure(text="Stopped", fg_color="red"))
            self.connect_button.bind("<Leave>", lambda e: self.connect_button.configure(text="Connected", fg_color="green"))
            #self.connect_button.configure(command=self.connect_vpn)

        elif "Stopped" == my_vpn_status:
            print("The VPN service is stopped.")
            self.connect_button.configure(text="Stopped", fg_color="Red")
            self.connect_button.bind("<Enter>", lambda e: self.connect_button.configure(text="Start", fg_color="green"))
            self.connect_button.bind("<Leave>", lambda e: self.connect_button.configure(text="Stopped", fg_color="red"))
            #self.connect_button.configure(command=self.connect_vpn)
 
        else:
            default_fg_color = self.upload_button._fg_color
            self.connect_button.configure(text="Connect", fg_color=default_fg_color)
            #self.connect_button.configure(command=self.connect_vpn)
            print("The service status is unknown.")
        
        self.connect_button.configure(command=self.connect_vpn)
        return self.main_container

    def get_call_list(self):
        pass

    def get_dashboard_tile_code(self):
        pass


    def save_settings(self):
        private_key_text = self.privateKey.get()
        client_ip_address_text = self.client_ip_address.get()
        public_key_text = self.publicKey.get()
        allowed_ips_text = self.allowedips.get()
        endpoint_text = self.endpoint.get()
        dns_text = self.dns.get()
        port_text = self.port.get()

        # Check for empty values
        if (not private_key_text or
            not client_ip_address_text or
            not public_key_text or
            not allowed_ips_text or
            not endpoint_text or
            not dns_text or
            not port_text):
            return True

        decrypted_data['private_key'] = private_key_text
        decrypted_data['client_ip_address'] = client_ip_address_text
        decrypted_data['public_key'] = public_key_text
        decrypted_data['allowed_ips'] = allowed_ips_text
        decrypted_data['endpoint'] = endpoint_text
        decrypted_data['dns'] = dns_text
        decrypted_data['port'] = port_text
        
        #saving values in a secure way 
        encrypt_data(decrypted_data)
        return False

    def create_wireguard_file(self):
        decrypted_data = decrypt_data()
        private_key = decrypted_data.get("private_key")
        public_key = decrypted_data.get("public_key")
        client_ip_address = decrypted_data.get("client_ip_address")
        allowed_ips = decrypted_data.get("allowed_ips")
        endpoint = decrypted_data.get("endpoint")
        dns = decrypted_data.get("dns")
        port = decrypted_data.get("port")
        config_path = "wg-client.conf"
        create_wireguard_config(private_key, public_key, client_ip_address, dns, allowed_ips, endpoint, port, config_path)
        print("Wireguard Configuration File created")
    

    def save_and_verify_settings(self):
        mysavings = self.save_settings()
        decrypted_data = decrypt_data()
        default_fg_color = self.upload_button._fg_color

        if mysavings:
            self.save_button.configure(text="Error: Empty Field", fg_color="red")
            self.save_button.after(1500, lambda: self.save_button.configure(text="Save", fg_color=default_fg_color))
        elif (decrypted_data.get("private_key") == self.privateKey.get() and
              decrypted_data.get("client_ip_address") == self.client_ip_address.get() and
              decrypted_data.get("public_key") == self.publicKey.get() and
              decrypted_data.get("allowed_ips") == self.allowedips.get() and
              decrypted_data.get("endpoint") == self.endpoint.get() and
              decrypted_data.get("dns") == self.dns.get() and
              decrypted_data.get("port") == self.port.get()):
            self.save_button.configure(text="Saved", fg_color="green")
            self.save_button.after(1500, lambda: self.save_button.configure(text="Save", fg_color=default_fg_color))
            self.create_wireguard_file()
        else:
            self.save_button.configure(text="Try Again", fg_color="red")
            self.save_button.after(1500, lambda: self.save_button.configure(text="Save", fg_color=default_fg_color))


        # Function to clear specific environment variables
    def clear_env_vars(self, *vars):
        for var in vars:
            os.environ.pop(var, None)


    #function to isntall wireguard in windows
    def download_install_wireguard(self):

        global wireguard_installed
        if wireguard_installed:
            return True
        # Check if WireGuard is already installed
        if os.path.exists("C:\\Program Files\\WireGuard\\wireguard.exe"):
            wireguard_installed = True
            return True

        # URL to download the WireGuard installer
        installer_url = "https://download.wireguard.com/windows-client/wireguard-installer.exe"

        # Path to save the downloaded file
        save_path = os.path.join(os.getcwd(), "wireguard-installer.exe")

        # Download the installer
        if download_file(installer_url, save_path):
            # Install the downloaded file as admin
            run_installer_as_admin(save_path)
        
        wireguard_installed = True
        return wireguard_installed
    
    
    #connection to wireguard 
    def connect_vpn(self):
        # # Check if all settings are saved
        # if self.save_settings():
        #     print("Please fill in all the VPN settings before connecting.")
        #     self.save_button.configure(text="Error: Empty Field", fg_color="red")
        #     self.save_button.after(1500, lambda: self.save_button.configure(text="Save"))
        #     return

        # Check if WireGuard is installed
        is_wg_installed = check_wireguard_installed()
        self.create_wireguard_file()

        # Create Key objects
        private = Key(decrypted_data.get("private_key"))
        srv_key = Key(decrypted_data.get("public_key"))
        interface_name = "wg-client"
        client_ip_address = decrypted_data.get("client_ip_address")

        # Check if the interface already exists
        existing_interfaces = os.popen('wg show interfaces').read().split()
        if interface_name not in existing_interfaces:
            # Set up the client
            print(f"Creating interface {interface_name}...")
            client = Client(interface_name, private, client_ip_address)
            # Set up the server connection
            server_conn = ServerConnection(srv_key, decrypted_data.get("endpoint"), decrypted_data.get("port"))
            # Configure the client to connect to the server
            client.set_server(server_conn)
        else:
            print(f"Interface {interface_name} already exists.")
            client = Client(interface_name, private, client_ip_address)
            server_conn = ServerConnection(srv_key, decrypted_data.get("endpoint"), decrypted_data.get("port"))

        global my_vpn_status 
        if is_wg_installed:
            if "Running" == my_vpn_status:
                stop_vpn(config_path)
                my_vpn_status = check_service_status("wg-client", "10.49.64.53")
                self.create_main_screen()
            elif "Stopped" == my_vpn_status:
                client.set_server(server_conn)
                start_vpn(config_path)
                my_vpn_status = check_service_status("wg-client", "10.49.64.53")
                self.create_main_screen()
            else:
                print("The service status is unknown.")    
        else:
            print("Wireguard not installed")

